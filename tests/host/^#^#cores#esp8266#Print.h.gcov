        -:    0:Source:../../cores/esp8266/Print.h
        -:    0:Programs:14
        -:    1:/*
        -:    2: Print.h - Base class that provides print() and println()
        -:    3: Copyright (c) 2008 David A. Mellis.  All right reserved.
        -:    4:
        -:    5: This library is free software; you can redistribute it and/or
        -:    6: modify it under the terms of the GNU Lesser General Public
        -:    7: License as published by the Free Software Foundation; either
        -:    8: version 2.1 of the License, or (at your option) any later version.
        -:    9:
        -:   10: This library is distributed in the hope that it will be useful,
        -:   11: but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
        -:   13: Lesser General Public License for more details.
        -:   14:
        -:   15: You should have received a copy of the GNU Lesser General Public
        -:   16: License along with this library; if not, write to the Free Software
        -:   17: Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
        -:   18: */
        -:   19:
        -:   20:#ifndef Print_h
        -:   21:#define Print_h
        -:   22:
        -:   23:#include <stdint.h>
        -:   24:#include <stddef.h>
        -:   25:
        -:   26:#include "WString.h"
        -:   27:#include "Printable.h"
        -:   28:
        -:   29:#define DEC 10
        -:   30:#define HEX 16
        -:   31:#define OCT 8
        -:   32:#define BIN 2
        -:   33:
        -:   34:class Print {
        -:   35:    private:
        -:   36:        int write_error;
        -:   37:        size_t printNumber(unsigned long, uint8_t);
        -:   38:        size_t printFloat(double, uint8_t);
        -:   39:    protected:
        -:   40:        void setWriteError(int err = 1) {
        -:   41:            write_error = err;
        -:   42:        }
        -:   43:    public:
function _ZN5PrintC2Ev called 0 returned 0% blocks executed 0%
    #####:   44:        Print() :
    #####:   45:                write_error(0) {
    #####:   46:        }
        -:   47:
        -:   48:        int getWriteError() {
        -:   49:            return write_error;
        -:   50:        }
        -:   51:        void clearWriteError() {
        -:   52:            setWriteError(0);
        -:   53:        }
        -:   54:
        -:   55:        virtual size_t write(uint8_t) = 0;
function _ZN5Print5writeEPKc called 23 returned 100% blocks executed 80%
       23:   56:        size_t write(const char *str) {
       23:   57:            if(str == NULL)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   58:                return 0;
       23:   59:            return write((const uint8_t *) str, strlen(str));
call    0 returned 100%
        -:   60:        }
        -:   61:        virtual size_t write(const uint8_t *buffer, size_t size);
function _ZN5Print5writeEPKcm called 0 returned 0% blocks executed 0%
    #####:   62:        size_t write(const char *buffer, size_t size) {
    #####:   63:            return write((const uint8_t *) buffer, size);
call    0 never executed
        -:   64:        }
        -:   65:
        -:   66:        size_t printf(const char * format, ...)  __attribute__ ((format (printf, 2, 3)));
        -:   67:        size_t printf_P(PGM_P format, ...) __attribute__((format(printf, 2, 3)));
        -:   68:        size_t print(const __FlashStringHelper *);
        -:   69:        size_t print(const String &);
        -:   70:        size_t print(const char[]);
        -:   71:        size_t print(char);
        -:   72:        size_t print(unsigned char, int = DEC);
        -:   73:        size_t print(int, int = DEC);
        -:   74:        size_t print(unsigned int, int = DEC);
        -:   75:        size_t print(long, int = DEC);
        -:   76:        size_t print(unsigned long, int = DEC);
        -:   77:        size_t print(double, int = 2);
        -:   78:        size_t print(const Printable&);
        -:   79:
        -:   80:        size_t println(const __FlashStringHelper *);
        -:   81:        size_t println(const String &s);
        -:   82:        size_t println(const char[]);
        -:   83:        size_t println(char);
        -:   84:        size_t println(unsigned char, int = DEC);
        -:   85:        size_t println(int, int = DEC);
        -:   86:        size_t println(unsigned int, int = DEC);
        -:   87:        size_t println(long, int = DEC);
        -:   88:        size_t println(unsigned long, int = DEC);
        -:   89:        size_t println(double, int = 2);
        -:   90:        size_t println(const Printable&);
        -:   91:        size_t println(void);
        -:   92:};
        -:   93:
        -:   94:#endif
