        -:    0:Source:../../cores/esp8266/StreamString.cpp
        -:    0:Programs:16
        -:    1:/**
        -:    2: StreamString.cpp
        -:    3:
        -:    4: Copyright (c) 2015 Markus Sattler. All rights reserved.
        -:    5: This file is part of the esp8266 core for Arduino environment.
        -:    6:
        -:    7: This library is free software; you can redistribute it and/or
        -:    8: modify it under the terms of the GNU Lesser General Public
        -:    9: License as published by the Free Software Foundation; either
        -:   10: version 2.1 of the License, or (at your option) any later version.
        -:   11:
        -:   12: This library is distributed in the hope that it will be useful,
        -:   13: but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   14: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
        -:   15: Lesser General Public License for more details.
        -:   16:
        -:   17: You should have received a copy of the GNU Lesser General Public
        -:   18: License along with this library; if not, write to the Free Software
        -:   19: Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
        -:   20:
        -:   21: */
        -:   22:
        -:   23:#include <Arduino.h>
        -:   24:#include "StreamString.h"
        -:   25:
function _ZN12StreamString5writeEPKhm called 7 returned 100% blocks executed 88%
        7:   26:size_t StreamString::write(const uint8_t *data, size_t size) {
        7:   27:    if(size && data) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        7:   28:        if(reserve(length() + size + 1)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        7:   29:            memcpy((void *) (buffer + len), (const void *) data, size);
        7:   30:            len += size;
        7:   31:            *(buffer + len) = 0x00; // add null for string end
        7:   32:            return size;
        -:   33:        }
        -:   34:    }
    #####:   35:    return 0;
        -:   36:}
        -:   37:
function _ZN12StreamString5writeEh called 0 returned 0% blocks executed 0%
    #####:   38:size_t StreamString::write(uint8_t data) {
    #####:   39:    return concat((char) data);
call    0 never executed
        -:   40:}
        -:   41:
function _ZN12StreamString9availableEv called 17 returned 100% blocks executed 100%
       17:   42:int StreamString::available() {
       17:   43:    return length();
call    0 returned 100%
        -:   44:}
        -:   45:
function _ZN12StreamString4readEv called 537 returned 100% blocks executed 86%
      537:   46:int StreamString::read() {
      537:   47:    if(length()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      537:   48:        char c = charAt(0);
call    0 returned 100%
      537:   49:        remove(0, 1);
call    0 returned 100%
      537:   50:        return c;
        -:   51:
        -:   52:    }
    #####:   53:    return -1;
        -:   54:}
        -:   55:
function _ZN12StreamString4peekEv called 0 returned 0% blocks executed 0%
    #####:   56:int StreamString::peek() {
    #####:   57:    if(length()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   58:        char c = charAt(0);
call    0 never executed
    #####:   59:        return c;
        -:   60:    }
    #####:   61:    return -1;
        -:   62:}
        -:   63:
function _ZN12StreamString5flushEv called 0 returned 0% blocks executed 0%
    #####:   64:void StreamString::flush() {
    #####:   65:}
        -:   66:
