        -:    0:Source:../../cores/esp8266/Print.cpp
        -:    0:Programs:14
        -:    1:/*
        -:    2: Print.cpp - Base class that provides print() and println()
        -:    3: Copyright (c) 2008 David A. Mellis.  All right reserved.
        -:    4:
        -:    5: This library is free software; you can redistribute it and/or
        -:    6: modify it under the terms of the GNU Lesser General Public
        -:    7: License as published by the Free Software Foundation; either
        -:    8: version 2.1 of the License, or (at your option) any later version.
        -:    9:
        -:   10: This library is distributed in the hope that it will be useful,
        -:   11: but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
        -:   13: Lesser General Public License for more details.
        -:   14:
        -:   15: You should have received a copy of the GNU Lesser General Public
        -:   16: License along with this library; if not, write to the Free Software
        -:   17: Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
        -:   18:
        -:   19: Modified 23 November 2006 by David A. Mellis
        -:   20: Modified December 2014 by Ivan Grokhotkov
        -:   21: Modified May 2015 by Michael C. Miller - esp8266 progmem support
        -:   22: */
        -:   23:
        -:   24:#include <stdlib.h>
        -:   25:#include <stdio.h>
        -:   26:#include <string.h>
        -:   27:#include <math.h>
        -:   28:#include <Arduino.h>
        -:   29:
        -:   30:#include "Print.h"
        -:   31:
        -:   32:// Public Methods //////////////////////////////////////////////////////////////
        -:   33:
        -:   34:/* default implementation: may be overridden */
function _ZN5Print5writeEPKhm called 0 returned 0% blocks executed 0%
    #####:   35:size_t Print::write(const uint8_t *buffer, size_t size) {
    #####:   36:    size_t n = 0;
    #####:   37:    while(size--) {
branch  0 never executed
branch  1 never executed
    #####:   38:        n += write(*buffer++);
call    0 never executed
        -:   39:    }
    #####:   40:    return n;
        -:   41:}
        -:   42:
function _ZN5Print6printfEPKcz called 0 returned 0% blocks executed 0%
    #####:   43:size_t Print::printf(const char *format, ...) {
        -:   44:    va_list arg;
    #####:   45:    va_start(arg, format);
        -:   46:    char temp[64];
    #####:   47:    char* buffer = temp;
    #####:   48:    size_t len = vsnprintf(temp, sizeof(temp), format, arg);
    #####:   49:    va_end(arg);
    #####:   50:    if (len > sizeof(temp) - 1) {
branch  0 never executed
branch  1 never executed
    #####:   51:        buffer = new char[len + 1];
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   52:        if (!buffer) {
branch  0 never executed
branch  1 never executed
    #####:   53:            return 0;
        -:   54:        }
    #####:   55:        va_start(arg, format);
    #####:   56:        vsnprintf(buffer, len + 1, format, arg);
    #####:   57:        va_end(arg);
        -:   58:    }
    #####:   59:    len = write((const uint8_t*) buffer, len);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   60:    if (buffer != temp) {
branch  0 never executed
branch  1 never executed
    #####:   61:        delete[] buffer;
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   62:    }
    #####:   63:    return len;
        -:   64:}
        -:   65:
function _ZN5Print8printf_PEPKcz called 0 returned 0% blocks executed 0%
    #####:   66:size_t Print::printf_P(PGM_P format, ...) {
        -:   67:    va_list arg;
    #####:   68:    va_start(arg, format);
        -:   69:    char temp[64];
    #####:   70:    char* buffer = temp;
    #####:   71:    size_t len = vsnprintf_P(temp, sizeof(temp), format, arg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   72:    va_end(arg);
    #####:   73:    if (len > sizeof(temp) - 1) {
branch  0 never executed
branch  1 never executed
    #####:   74:        buffer = new char[len + 1];
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   75:        if (!buffer) {
branch  0 never executed
branch  1 never executed
    #####:   76:            return 0;
        -:   77:        }
    #####:   78:        va_start(arg, format);
    #####:   79:        vsnprintf_P(buffer, len + 1, format, arg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   80:        va_end(arg);
        -:   81:    }
    #####:   82:    len = write((const uint8_t*) buffer, len);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   83:    if (buffer != temp) {
branch  0 never executed
branch  1 never executed
    #####:   84:        delete[] buffer;
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   85:    }
    #####:   86:    return len;
        -:   87:}
        -:   88:
function _ZN5Print5printEPK19__FlashStringHelper called 0 returned 0% blocks executed 0%
    #####:   89:size_t Print::print(const __FlashStringHelper *ifsh) {
    #####:   90:    PGM_P p = reinterpret_cast<PGM_P>(ifsh);
        -:   91:
    #####:   92:    size_t n = 0;
    #####:   93:    while (1) {
    #####:   94:        uint8_t c = pgm_read_byte(p++);
    #####:   95:        if (c == 0) break;
branch  0 never executed
branch  1 never executed
    #####:   96:        n += write(c);
call    0 never executed
        -:   97:    }
    #####:   98:    return n;
        -:   99:}
        -:  100:
function _ZN5Print5printERK6String called 0 returned 0% blocks executed 0%
    #####:  101:size_t Print::print(const String &s) {
    #####:  102:    return write(s.c_str(), s.length());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  103:}
        -:  104:
function _ZN5Print5printEPKc called 23 returned 100% blocks executed 100%
       23:  105:size_t Print::print(const char str[]) {
       23:  106:    return write(str);
call    0 returned 100%
        -:  107:}
        -:  108:
function _ZN5Print5printEc called 0 returned 0% blocks executed 0%
    #####:  109:size_t Print::print(char c) {
    #####:  110:    return write(c);
call    0 never executed
        -:  111:}
        -:  112:
function _ZN5Print5printEhi called 0 returned 0% blocks executed 0%
    #####:  113:size_t Print::print(unsigned char b, int base) {
    #####:  114:    return print((unsigned long) b, base);
call    0 never executed
        -:  115:}
        -:  116:
function _ZN5Print5printEii called 0 returned 0% blocks executed 0%
    #####:  117:size_t Print::print(int n, int base) {
    #####:  118:    return print((long) n, base);
call    0 never executed
        -:  119:}
        -:  120:
function _ZN5Print5printEji called 0 returned 0% blocks executed 0%
    #####:  121:size_t Print::print(unsigned int n, int base) {
    #####:  122:    return print((unsigned long) n, base);
call    0 never executed
        -:  123:}
        -:  124:
function _ZN5Print5printEli called 0 returned 0% blocks executed 0%
    #####:  125:size_t Print::print(long n, int base) {
    #####:  126:    if(base == 0) {
branch  0 never executed
branch  1 never executed
    #####:  127:        return write(n);
call    0 never executed
    #####:  128:    } else if(base == 10) {
branch  0 never executed
branch  1 never executed
    #####:  129:        if(n < 0) {
branch  0 never executed
branch  1 never executed
    #####:  130:            int t = print('-');
call    0 never executed
    #####:  131:            n = -n;
    #####:  132:            return printNumber(n, 10) + t;
call    0 never executed
        -:  133:        }
    #####:  134:        return printNumber(n, 10);
call    0 never executed
        -:  135:    } else {
    #####:  136:        return printNumber(n, base);
call    0 never executed
        -:  137:    }
        -:  138:}
        -:  139:
function _ZN5Print5printEmi called 0 returned 0% blocks executed 0%
    #####:  140:size_t Print::print(unsigned long n, int base) {
    #####:  141:    if(base == 0)
branch  0 never executed
branch  1 never executed
    #####:  142:        return write(n);
call    0 never executed
        -:  143:    else
    #####:  144:        return printNumber(n, base);
call    0 never executed
        -:  145:}
        -:  146:
function _ZN5Print5printEdi called 0 returned 0% blocks executed 0%
    #####:  147:size_t Print::print(double n, int digits) {
    #####:  148:    return printFloat(n, digits);
call    0 never executed
        -:  149:}
        -:  150:
function _ZN5Print7printlnEPK19__FlashStringHelper called 0 returned 0% blocks executed 0%
    #####:  151:size_t Print::println(const __FlashStringHelper *ifsh) {
    #####:  152:    size_t n = print(ifsh);
call    0 never executed
    #####:  153:    n += println();
call    0 never executed
    #####:  154:    return n;
        -:  155:}
        -:  156:
function _ZN5Print5printERK9Printable called 0 returned 0% blocks executed 0%
    #####:  157:size_t Print::print(const Printable& x) {
    #####:  158:    return x.printTo(*this);
call    0 never executed
        -:  159:}
        -:  160:
function _ZN5Print7printlnEv called 2 returned 100% blocks executed 100%
        2:  161:size_t Print::println(void) {
        2:  162:    return print("\r\n");
call    0 returned 100%
        -:  163:}
        -:  164:
function _ZN5Print7printlnERK6String called 0 returned 0% blocks executed 0%
    #####:  165:size_t Print::println(const String &s) {
    #####:  166:    size_t n = print(s);
call    0 never executed
    #####:  167:    n += println();
call    0 never executed
    #####:  168:    return n;
        -:  169:}
        -:  170:
function _ZN5Print7printlnEPKc called 2 returned 100% blocks executed 100%
        2:  171:size_t Print::println(const char c[]) {
        2:  172:    size_t n = print(c);
call    0 returned 100%
        2:  173:    n += println();
call    0 returned 100%
        2:  174:    return n;
        -:  175:}
        -:  176:
function _ZN5Print7printlnEc called 0 returned 0% blocks executed 0%
    #####:  177:size_t Print::println(char c) {
    #####:  178:    size_t n = print(c);
call    0 never executed
    #####:  179:    n += println();
call    0 never executed
    #####:  180:    return n;
        -:  181:}
        -:  182:
function _ZN5Print7printlnEhi called 0 returned 0% blocks executed 0%
    #####:  183:size_t Print::println(unsigned char b, int base) {
    #####:  184:    size_t n = print(b, base);
call    0 never executed
    #####:  185:    n += println();
call    0 never executed
    #####:  186:    return n;
        -:  187:}
        -:  188:
function _ZN5Print7printlnEii called 0 returned 0% blocks executed 0%
    #####:  189:size_t Print::println(int num, int base) {
    #####:  190:    size_t n = print(num, base);
call    0 never executed
    #####:  191:    n += println();
call    0 never executed
    #####:  192:    return n;
        -:  193:}
        -:  194:
function _ZN5Print7printlnEji called 0 returned 0% blocks executed 0%
    #####:  195:size_t Print::println(unsigned int num, int base) {
    #####:  196:    size_t n = print(num, base);
call    0 never executed
    #####:  197:    n += println();
call    0 never executed
    #####:  198:    return n;
        -:  199:}
        -:  200:
function _ZN5Print7printlnEli called 0 returned 0% blocks executed 0%
    #####:  201:size_t Print::println(long num, int base) {
    #####:  202:    size_t n = print(num, base);
call    0 never executed
    #####:  203:    n += println();
call    0 never executed
    #####:  204:    return n;
        -:  205:}
        -:  206:
function _ZN5Print7printlnEmi called 0 returned 0% blocks executed 0%
    #####:  207:size_t Print::println(unsigned long num, int base) {
    #####:  208:    size_t n = print(num, base);
call    0 never executed
    #####:  209:    n += println();
call    0 never executed
    #####:  210:    return n;
        -:  211:}
        -:  212:
function _ZN5Print7printlnEdi called 0 returned 0% blocks executed 0%
    #####:  213:size_t Print::println(double num, int digits) {
    #####:  214:    size_t n = print(num, digits);
call    0 never executed
    #####:  215:    n += println();
call    0 never executed
    #####:  216:    return n;
        -:  217:}
        -:  218:
function _ZN5Print7printlnERK9Printable called 0 returned 0% blocks executed 0%
    #####:  219:size_t Print::println(const Printable& x) {
    #####:  220:    size_t n = print(x);
call    0 never executed
    #####:  221:    n += println();
call    0 never executed
    #####:  222:    return n;
        -:  223:}
        -:  224:
        -:  225:// Private Methods /////////////////////////////////////////////////////////////
        -:  226:
function _ZN5Print11printNumberEmh called 0 returned 0% blocks executed 0%
    #####:  227:size_t Print::printNumber(unsigned long n, uint8_t base) {
        -:  228:    char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
    #####:  229:    char *str = &buf[sizeof(buf) - 1];
        -:  230:
    #####:  231:    *str = '\0';
        -:  232:
        -:  233:    // prevent crash if called with base == 1
    #####:  234:    if(base < 2)
branch  0 never executed
branch  1 never executed
    #####:  235:        base = 10;
        -:  236:
    #####:  237:    do {
branch  0 never executed
branch  1 never executed
    #####:  238:        unsigned long m = n;
    #####:  239:        n /= base;
    #####:  240:        char c = m - base * n;
    #####:  241:        *--str = c < 10 ? c + '0' : c + 'A' - 10;
branch  0 never executed
branch  1 never executed
        -:  242:    } while(n);
        -:  243:
    #####:  244:    return write(str);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  245:}
        -:  246:
function _ZN5Print10printFloatEdh called 0 returned 0% blocks executed 0%
    #####:  247:size_t Print::printFloat(double number, uint8_t digits) {
    #####:  248:    size_t n = 0;
        -:  249:
    #####:  250:    if(isnan(number))
branch  0 never executed
branch  1 never executed
    #####:  251:        return print("nan");
call    0 never executed
    #####:  252:    if(isinf(number))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  253:        return print("inf");
call    0 never executed
    #####:  254:    if(number > 4294967040.0)
branch  0 never executed
branch  1 never executed
    #####:  255:        return print("ovf");  // constant determined empirically
call    0 never executed
    #####:  256:    if(number < -4294967040.0)
branch  0 never executed
branch  1 never executed
    #####:  257:        return print("ovf");  // constant determined empirically
call    0 never executed
        -:  258:
        -:  259:    // Handle negative numbers
    #####:  260:    if(number < 0.0) {
branch  0 never executed
branch  1 never executed
    #####:  261:        n += print('-');
call    0 never executed
    #####:  262:        number = -number;
        -:  263:    }
        -:  264:
        -:  265:    // Round correctly so that print(1.999, 2) prints as "2.00"
    #####:  266:    double rounding = 0.5;
    #####:  267:    for(uint8_t i = 0; i < digits; ++i)
branch  0 never executed
branch  1 never executed
    #####:  268:        rounding /= 10.0;
        -:  269:
    #####:  270:    number += rounding;
        -:  271:
        -:  272:    // Extract the integer part of the number and print it
    #####:  273:    unsigned long int_part = (unsigned long) number;
    #####:  274:    double remainder = number - (double) int_part;
    #####:  275:    n += print(int_part);
call    0 never executed
        -:  276:
        -:  277:    // Print the decimal point, but only if there are digits beyond
    #####:  278:    if(digits > 0) {
branch  0 never executed
branch  1 never executed
    #####:  279:        n += print(".");
call    0 never executed
        -:  280:    }
        -:  281:
        -:  282:    // Extract digits from the remainder one at a time
    #####:  283:    while(digits-- > 0) {
branch  0 never executed
branch  1 never executed
    #####:  284:        remainder *= 10.0;
    #####:  285:        int toPrint = int(remainder);
    #####:  286:        n += print(toPrint);
call    0 never executed
    #####:  287:        remainder -= toPrint;
        -:  288:    }
        -:  289:
    #####:  290:    return n;
        -:  291:}
