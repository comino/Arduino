        -:    0:Source:../../cores/esp8266/spiffs_api.h
        -:    0:Programs:16
        -:    1:#ifndef spiffs_api_h
        -:    2:#define spiffs_api_h
        -:    3:
        -:    4:/*
        -:    5: spiffs_api.h - file system wrapper for SPIFFS
        -:    6: Copyright (c) 2015 Ivan Grokhotkov. All rights reserved.
        -:    7:
        -:    8: This code was influenced by NodeMCU and Sming libraries, and first version of
        -:    9: Arduino wrapper written by Hristo Gochkov.
        -:   10:
        -:   11: This file is part of the esp8266 core for Arduino environment.
        -:   12:
        -:   13: This library is free software; you can redistribute it and/or
        -:   14: modify it under the terms of the GNU Lesser General Public
        -:   15: License as published by the Free Software Foundation; either
        -:   16: version 2.1 of the License, or (at your option) any later version.
        -:   17:
        -:   18: This library is distributed in the hope that it will be useful,
        -:   19: but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   20: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
        -:   21: Lesser General Public License for more details.
        -:   22:
        -:   23: You should have received a copy of the GNU Lesser General Public
        -:   24: License along with this library; if not, write to the Free Software
        -:   25: Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
        -:   26: */
        -:   27:#include <limits>
        -:   28:#include "FS.h"
        -:   29:#undef max
        -:   30:#undef min
        -:   31:#include "FSImpl.h"
        -:   32:#include "spiffs/spiffs.h"
        -:   33:#include "debug.h"
        -:   34:#include "flash_utils.h"
        -:   35:
        -:   36:using namespace fs;
        -:   37:
        -:   38:extern int32_t spiffs_hal_write(uint32_t addr, uint32_t size, uint8_t *src);
        -:   39:extern int32_t spiffs_hal_erase(uint32_t addr, uint32_t size);
        -:   40:extern int32_t spiffs_hal_read(uint32_t addr, uint32_t size, uint8_t *dst);
        -:   41:
        -:   42:int getSpiffsMode(OpenMode openMode, AccessMode accessMode);
        -:   43:bool isSpiffsFilenameValid(const char* name);
        -:   44:
        -:   45:class SPIFFSFileImpl;
        -:   46:class SPIFFSDirImpl;
        -:   47:
        -:   48:class SPIFFSImpl : public FSImpl
        -:   49:{
        -:   50:public:
        -:   51:    SPIFFSImpl(uint32_t start, uint32_t size, uint32_t pageSize, uint32_t blockSize, uint32_t maxOpenFds)
        -:   52:        : _start(start)
        -:   53:    , _size(size)
        -:   54:    , _pageSize(pageSize)
        -:   55:    , _blockSize(blockSize)
        -:   56:    , _maxOpenFds(maxOpenFds)
        -:   57:    {
        -:   58:        memset(&_fs, 0, sizeof(_fs));
        -:   59:    }
        -:   60:
        -:   61:    FileImplPtr open(const char* path, OpenMode openMode, AccessMode accessMode) override;
        -:   62:    bool exists(const char* path) override;
        -:   63:    DirImplPtr openDir(const char* path) override;
        -:   64:
function _ZN10SPIFFSImpl6renameEPKcS1_ called 0 returned 0% blocks executed 0%
    #####:   65:    bool rename(const char* pathFrom, const char* pathTo) override
        -:   66:    {
    #####:   67:        if (!isSpiffsFilenameValid(pathFrom)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   68:            DEBUGV("SPIFFSImpl::rename: invalid pathFrom=`%s`\r\n", pathFrom);
    #####:   69:            return false;
        -:   70:        }
    #####:   71:        if (!isSpiffsFilenameValid(pathTo)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   72:            DEBUGV("SPIFFSImpl::rename: invalid pathTo=`%s` \r\n", pathTo);
    #####:   73:            return false;
        -:   74:        }
    #####:   75:        auto rc = SPIFFS_rename(&_fs, pathFrom, pathTo);
call    0 never executed
    #####:   76:        if (rc != SPIFFS_OK) {
branch  0 never executed
branch  1 never executed
        -:   77:            DEBUGV("SPIFFS_rename: rc=%d, from=`%s`, to=`%s`\r\n", rc,
        -:   78:                   pathFrom, pathTo);
    #####:   79:            return false;
        -:   80:        }
    #####:   81:        return true;
        -:   82:    }
function _ZN10SPIFFSImpl4infoERN2fs6FSInfoE called 0 returned 0% blocks executed 0%
    #####:   83:    bool info(FSInfo& info) override
        -:   84:    {
    #####:   85:        info.maxOpenFiles = _maxOpenFds;
    #####:   86:        info.blockSize = _blockSize;
    #####:   87:        info.pageSize = _pageSize;
    #####:   88:        info.maxOpenFiles = _maxOpenFds;
    #####:   89:        info.maxPathLength = SPIFFS_OBJ_NAME_LEN;
        -:   90:        uint32_t totalBytes, usedBytes;
    #####:   91:        auto rc = SPIFFS_info(&_fs, &totalBytes, &usedBytes);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   92:        if (rc != SPIFFS_OK) {
branch  0 never executed
branch  1 never executed
        -:   93:            DEBUGV("SPIFFS_info: rc=%d, err=%d\r\n", rc, _fs.err_code);
    #####:   94:            return false;
        -:   95:        }
    #####:   96:        info.totalBytes = totalBytes;
    #####:   97:        info.usedBytes = usedBytes;
    #####:   98:        return true;
        -:   99:    }
        -:  100:
function _ZN10SPIFFSImpl6removeEPKc called 0 returned 0% blocks executed 0%
    #####:  101:    bool remove(const char* path) override
        -:  102:    {
    #####:  103:        if (!isSpiffsFilenameValid(path)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  104:            DEBUGV("SPIFFSImpl::remove: invalid path=`%s`\r\n", path);
    #####:  105:            return false;
        -:  106:        }
    #####:  107:        auto rc = SPIFFS_remove(&_fs, path);
call    0 never executed
    #####:  108:        if (rc != SPIFFS_OK) {
branch  0 never executed
branch  1 never executed
        -:  109:            DEBUGV("SPIFFS_remove: rc=%d path=`%s`\r\n", rc, path);
    #####:  110:            return false;
        -:  111:        }
    #####:  112:        return true;
        -:  113:    }
        -:  114:
function _ZN10SPIFFSImpl5beginEv called 11 returned 100% blocks executed 86%
       11:  115:    bool begin() override
        -:  116:    {
       11:  117:        if (SPIFFS_mounted(&_fs) != 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  118:            return true;
        -:  119:        }
       11:  120:        if (_size == 0) {
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  121:            DEBUGV("SPIFFS size is zero");
        1:  122:            return false;
        -:  123:        }
       10:  124:        if (_tryMount()) {
call    0 returned 100%
branch  1 taken 20% (fallthrough)
branch  2 taken 80%
        2:  125:            return true;
        -:  126:        }
        8:  127:        auto rc = SPIFFS_format(&_fs);
call    0 returned 100%
        8:  128:        if (rc != SPIFFS_OK) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  129:            DEBUGV("SPIFFS_format: rc=%d, err=%d\r\n", rc, _fs.err_code);
    #####:  130:            return false;
        -:  131:        }
        8:  132:        return _tryMount();
call    0 returned 100%
        -:  133:    }
        -:  134:
function _ZN10SPIFFSImpl3endEv called 0 returned 0% blocks executed 0%
    #####:  135:    void end() override
        -:  136:    {
    #####:  137:        if (SPIFFS_mounted(&_fs) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  138:            return;
        -:  139:        }
    #####:  140:        SPIFFS_unmount(&_fs);
call    0 never executed
        -:  141:    }
        -:  142:
function _ZN10SPIFFSImpl6formatEv called 2 returned 100% blocks executed 86%
        2:  143:    bool format() override
        -:  144:    {
        2:  145:        if (_size == 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  146:            DEBUGV("SPIFFS size is zero");
    #####:  147:            return false;
        -:  148:        }
        -:  149:
        2:  150:        bool wasMounted = (SPIFFS_mounted(&_fs) != 0);
call    0 returned 100%
        -:  151:
        2:  152:        if (_tryMount()) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        1:  153:            SPIFFS_unmount(&_fs);
call    0 returned 100%
        -:  154:        }
        2:  155:        auto rc = SPIFFS_format(&_fs);
call    0 returned 100%
        2:  156:        if (rc != SPIFFS_OK) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  157:            DEBUGV("SPIFFS_format: rc=%d, err=%d\r\n", rc, _fs.err_code);
    #####:  158:            return false;
        -:  159:        }
        -:  160:
        2:  161:        if (wasMounted) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  162:            return _tryMount();
call    0 returned 100%
        -:  163:        }
        -:  164:
        1:  165:        return true;
        -:  166:    }
        -:  167:
        -:  168:protected:
        -:  169:    friend class SPIFFSFileImpl;
        -:  170:    friend class SPIFFSDirImpl;
        -:  171:
function _ZN10SPIFFSImpl5getFsEv called 23070020 returned 100% blocks executed 100%
 23070020:  172:    spiffs* getFs()
        -:  173:    {
 23070020:  174:        return &_fs;
        -:  175:    }
        -:  176:
function _ZN10SPIFFSImpl9_tryMountEv called 21 returned 100% blocks executed 86%
       21:  177:    bool _tryMount()
        -:  178:    {
        -:  179:        spiffs_config config;
       21:  180:        memset(&config, 0, sizeof(config));
        -:  181:
       21:  182:        config.hal_read_f       = &spiffs_hal_read;
       21:  183:        config.hal_write_f      = &spiffs_hal_write;
       21:  184:        config.hal_erase_f      = &spiffs_hal_erase;
       21:  185:        config.phys_size        = _size;
       21:  186:        config.phys_addr        = _start;
       21:  187:        config.phys_erase_block = FLASH_SECTOR_SIZE;
       21:  188:        config.log_block_size   = _blockSize;
       21:  189:        config.log_page_size    = _pageSize;
        -:  190:
        -:  191:
       21:  192:        if (((uint32_t) std::numeric_limits<spiffs_block_ix>::max()) < (_size / _blockSize)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  193:            DEBUGV("spiffs_block_ix type too small");
    #####:  194:            abort();
call    0 never executed
        -:  195:        }
        -:  196:
       21:  197:        if (((uint32_t) std::numeric_limits<spiffs_page_ix>::max()) < (_size / _pageSize)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  198:            DEBUGV("spiffs_page_ix type too small");
    #####:  199:            abort();
call    0 never executed
        -:  200:        }
        -:  201:
       21:  202:        if (((uint32_t) std::numeric_limits<spiffs_obj_id>::max()) < (2 + (_size / (2*_pageSize))*2)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  203:            DEBUGV("spiffs_obj_id type too small");
    #####:  204:            abort();
call    0 never executed
        -:  205:        }
        -:  206:
       21:  207:        if (((uint32_t) std::numeric_limits<spiffs_span_ix>::max()) < (_size / _pageSize - 1)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  208:            DEBUGV("spiffs_span_ix type too small");
    #####:  209:            abort();
call    0 never executed
        -:  210:        }
        -:  211:
        -:  212:        // hack: even though fs is not initialized at this point,
        -:  213:        // SPIFFS_buffer_bytes_for_cache uses only fs->config.log_page_size
        -:  214:        // suggestion: change SPIFFS_buffer_bytes_for_cache to take
        -:  215:        // spiffs_config* instead of spiffs* as an argument
       21:  216:        _fs.cfg.log_page_size = config.log_page_size;
        -:  217:
       21:  218:        size_t workBufSize = 2 * _pageSize;
       21:  219:        size_t fdsBufSize = SPIFFS_buffer_bytes_for_filedescs(&_fs, _maxOpenFds);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       21:  220:        size_t cacheBufSize = SPIFFS_buffer_bytes_for_cache(&_fs, _maxOpenFds);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  221:
       21:  222:        if (!_workBuf) {
call    0 returned 100%
branch  1 taken 48% (fallthrough)
branch  2 taken 52%
        -:  223:            DEBUGV("SPIFFSImpl: allocating %d+%d+%d=%d bytes\r\n",
        -:  224:                   workBufSize, fdsBufSize, cacheBufSize,
        -:  225:                   workBufSize + fdsBufSize + cacheBufSize);
       10:  226:            _workBuf.reset(new uint8_t[workBufSize]);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
       10:  227:            _fdsBuf.reset(new uint8_t[fdsBufSize]);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
       10:  228:            _cacheBuf.reset(new uint8_t[cacheBufSize]);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  229:        }
        -:  230:
        -:  231:        DEBUGV("SPIFFSImpl: mounting fs @%x, size=%x, block=%x, page=%x\r\n",
        -:  232:               _start, _size, _blockSize, _pageSize);
        -:  233:
       42:  234:        auto err = SPIFFS_mount(&_fs, &config, _workBuf.get(),
call    0 returned 100%
call    1 returned 100%
       21:  235:                                _fdsBuf.get(), fdsBufSize, _cacheBuf.get(), cacheBufSize,
call    0 returned 100%
       21:  236:                                &SPIFFSImpl::_check_cb);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  237:
        -:  238:        DEBUGV("SPIFFSImpl: mount rc=%d\r\n", err);
        -:  239:
       21:  240:        return err == SPIFFS_OK;
        -:  241:    }
        -:  242:
function _ZN10SPIFFSImpl9_check_cbE17spiffs_check_type19spiffs_check_reportjj called 0 returned 0% blocks executed 0%
    #####:  243:    static void _check_cb(spiffs_check_type type, spiffs_check_report report,
        -:  244:                          uint32_t arg1, uint32_t arg2)
        -:  245:    {
        -:  246:        (void) type;
        -:  247:        (void) report;
        -:  248:        (void) arg1;
        -:  249:        (void) arg2;
        -:  250:        
        -:  251:        // TODO: spiffs doesn't pass any context pointer along with _check_cb,
        -:  252:        // so we can't do anything useful here other than perhaps
        -:  253:        // feeding the watchdog
    #####:  254:    }
        -:  255:
        -:  256:    spiffs _fs;
        -:  257:
        -:  258:    uint32_t _start;
        -:  259:    uint32_t _size;
        -:  260:    uint32_t _pageSize;
        -:  261:    uint32_t _blockSize;
        -:  262:    uint32_t _maxOpenFds;
        -:  263:
        -:  264:    std::unique_ptr<uint8_t[]> _workBuf;
        -:  265:    std::unique_ptr<uint8_t[]> _fdsBuf;
        -:  266:    std::unique_ptr<uint8_t[]> _cacheBuf;
        -:  267:};
        -:  268:
        -:  269:#define CHECKFD() while (_fd == 0) { panic(); }
        -:  270:
        -:  271:class SPIFFSFileImpl : public FileImpl
        -:  272:{
        -:  273:public:
function _ZN14SPIFFSFileImplC2EP10SPIFFSImpls called 23 returned 100% blocks executed 80%
       23:  274:    SPIFFSFileImpl(SPIFFSImpl* fs, spiffs_file fd)
        -:  275:        : _fs(fs)
        -:  276:        , _fd(fd)
       23:  277:    , _written(false)
call    0 returned 100%
call    1 never executed
        -:  278:    {
       23:  279:        memset(&_stat, 0, sizeof(_stat));
       23:  280:        _getStat();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       23:  281:    }
        -:  282:
function _ZN14SPIFFSFileImplD0Ev called 0 returned 0% blocks executed 0%
function _ZN14SPIFFSFileImplD2Ev called 23 returned 100% blocks executed 80%
       23:  283:    ~SPIFFSFileImpl() override
       46:  284:    {
call    0 returned 100%
       23:  285:        close();
call    0 returned 100%
       23:  286:    }
call    0 never executed
call    1 never executed
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
        -:  287:
function _ZN14SPIFFSFileImpl5writeEPKhm called 20 returned 100% blocks executed 75%
       20:  288:    size_t write(const uint8_t *buf, size_t size) override
        -:  289:    {
       20:  290:        CHECKFD();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  291:
       20:  292:        auto result = SPIFFS_write(_fs->getFs(), _fd, (void*) buf, size);
call    0 returned 100%
call    1 returned 100%
       20:  293:        if (result < 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  294:            DEBUGV("SPIFFS_write rc=%d\r\n", result);
    #####:  295:            return 0;
        -:  296:        }
       20:  297:        _written = true;
       20:  298:        return result;
        -:  299:    }
        -:  300:
function _ZN14SPIFFSFileImpl4readEPhm called 23069954 returned 100% blocks executed 88%
 23069954:  301:    size_t read(uint8_t* buf, size_t size) override
        -:  302:    {
 23069954:  303:        CHECKFD();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
 23069954:  304:        auto result = SPIFFS_read(_fs->getFs(), _fd, (void*) buf, size);
call    0 returned 100%
call    1 returned 100%
 23069954:  305:        if (result < 0) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:  306:            DEBUGV("SPIFFS_read rc=%d\r\n", result);
 23069938:  307:            return 0;
        -:  308:        }
        -:  309:
       16:  310:        return result;
        -:  311:    }
        -:  312:
function _ZN14SPIFFSFileImpl5flushEv called 0 returned 0% blocks executed 0%
    #####:  313:    void flush() override
        -:  314:    {
    #####:  315:        CHECKFD();
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  316:
    #####:  317:        auto rc = SPIFFS_fflush(_fs->getFs(), _fd);
call    0 never executed
call    1 never executed
        -:  318:        if (rc < 0) {
        -:  319:            DEBUGV("SPIFFS_fflush rc=%d\r\n", rc);
        -:  320:        }
    #####:  321:        _written = true;
    #####:  322:    }
        -:  323:
function _ZN14SPIFFSFileImpl4seekEjN2fs8SeekModeE called 0 returned 0% blocks executed 0%
    #####:  324:    bool seek(uint32_t pos, SeekMode mode) override
        -:  325:    {
    #####:  326:        CHECKFD();
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  327:
    #####:  328:        int32_t offset = static_cast<int32_t>(pos);
    #####:  329:        if (mode == SeekEnd) {
branch  0 never executed
branch  1 never executed
    #####:  330:            offset = -offset;
        -:  331:        }
    #####:  332:        auto rc = SPIFFS_lseek(_fs->getFs(), _fd, pos, (int) mode);
call    0 never executed
call    1 never executed
    #####:  333:        if (rc < 0) {
branch  0 never executed
branch  1 never executed
        -:  334:            DEBUGV("SPIFFS_lseek rc=%d\r\n", rc);
    #####:  335:            return false;
        -:  336:        }
        -:  337:
    #####:  338:        return true;
        -:  339:    }
        -:  340:
function _ZNK14SPIFFSFileImpl8positionEv called 0 returned 0% blocks executed 0%
    #####:  341:    size_t position() const override
        -:  342:    {
    #####:  343:        CHECKFD();
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  344:
    #####:  345:        auto result = SPIFFS_lseek(_fs->getFs(), _fd, 0, SPIFFS_SEEK_CUR);
call    0 never executed
call    1 never executed
    #####:  346:        if (result < 0) {
branch  0 never executed
branch  1 never executed
        -:  347:            DEBUGV("SPIFFS_tell rc=%d\r\n", result);
    #####:  348:            return 0;
        -:  349:        }
        -:  350:
    #####:  351:        return result;
        -:  352:    }
        -:  353:
function _ZNK14SPIFFSFileImpl4sizeEv called 0 returned 0% blocks executed 0%
    #####:  354:    size_t size() const override
        -:  355:    {
    #####:  356:        CHECKFD();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  357:        if (_written) {
branch  0 never executed
branch  1 never executed
    #####:  358:            _getStat();
call    0 never executed
        -:  359:        }
    #####:  360:        return _stat.size;
        -:  361:    }
        -:  362:
function _ZN14SPIFFSFileImpl5closeEv called 23 returned 100% blocks executed 80%
       23:  363:    void close() override
        -:  364:    {
       23:  365:        CHECKFD();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  366:
       23:  367:        SPIFFS_close(_fs->getFs(), _fd);
call    0 returned 100%
call    1 returned 100%
        -:  368:        DEBUGV("SPIFFS_close: fd=%d\r\n", _fd);
       23:  369:    }
        -:  370:
function _ZNK14SPIFFSFileImpl4nameEv called 0 returned 0% blocks executed 0%
    #####:  371:    const char* name() const override
        -:  372:    {
    #####:  373:        CHECKFD();
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  374:
    #####:  375:        return (const char*) _stat.name;
        -:  376:    }
        -:  377:
        -:  378:protected:
function _ZNK14SPIFFSFileImpl8_getStatEv called 23 returned 100% blocks executed 71%
       23:  379:    void _getStat() const
        -:  380:    {
       23:  381:        CHECKFD();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       23:  382:        auto rc = SPIFFS_fstat(_fs->getFs(), _fd, &_stat);
call    0 returned 100%
call    1 returned 100%
       23:  383:        if (rc != SPIFFS_OK) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  384:            DEBUGV("SPIFFS_fstat rc=%d\r\n", rc);
    #####:  385:            memset(&_stat, 0, sizeof(_stat));
        -:  386:        }
       23:  387:        _written = false;
       23:  388:    }
        -:  389:
        -:  390:    SPIFFSImpl* _fs;
        -:  391:    spiffs_file _fd;
        -:  392:    mutable spiffs_stat _stat;
        -:  393:    mutable bool        _written;
        -:  394:};
        -:  395:
        -:  396:class SPIFFSDirImpl : public DirImpl
        -:  397:{
        -:  398:public:
function _ZN13SPIFFSDirImplC2ERK6StringP10SPIFFSImplR10spiffs_DIR called 4 returned 100% blocks executed 80%
        4:  399:    SPIFFSDirImpl(const String& pattern, SPIFFSImpl* fs, spiffs_DIR& dir)
        -:  400:        : _pattern(pattern)
        -:  401:        , _fs(fs)
        -:  402:        , _dir(dir)
        4:  403:        , _valid(false)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
        -:  404:    {
        4:  405:    }
        -:  406:
function _ZN13SPIFFSDirImplD0Ev called 0 returned 0% blocks executed 0%
function _ZN13SPIFFSDirImplD2Ev called 4 returned 100% blocks executed 83%
        4:  407:    ~SPIFFSDirImpl() override
        8:  408:    {
call    0 returned 100%
call    1 returned 100%
        4:  409:        SPIFFS_closedir(&_dir);
call    0 returned 100%
        4:  410:    }
call    0 never executed
call    1 never executed
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
        -:  411:
function _ZN13SPIFFSDirImpl8openFileEN2fs8OpenModeENS0_10AccessModeE called 0 returned 0% blocks executed 0%
    #####:  412:    FileImplPtr openFile(OpenMode openMode, AccessMode accessMode) override
        -:  413:    {
    #####:  414:        if (!_valid) {
branch  0 never executed
branch  1 never executed
    #####:  415:            return FileImplPtr();
call    0 never executed
        -:  416:        }
    #####:  417:        int mode = getSpiffsMode(openMode, accessMode);
call    0 never executed
    #####:  418:        auto fs = _fs->getFs();
call    0 never executed
    #####:  419:        spiffs_file fd = SPIFFS_open_by_dirent(fs, &_dirent, mode, 0);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  420:        if (fd < 0) {
branch  0 never executed
branch  1 never executed
        -:  421:            DEBUGV("SPIFFSDirImpl::openFile: fd=%d path=`%s` openMode=%d accessMode=%d err=%d\r\n",
        -:  422:                   fd, _dirent.name, openMode, accessMode, fs->err_code);
    #####:  423:            return FileImplPtr();
call    0 never executed
        -:  424:        }
    #####:  425:        return std::make_shared<SPIFFSFileImpl>(_fs, fd);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  426:    }
        -:  427:
function _ZN13SPIFFSDirImpl8fileNameEv called 22 returned 100% blocks executed 75%
       22:  428:    const char* fileName() override
        -:  429:    {
       22:  430:        if (!_valid) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  431:            return nullptr;
        -:  432:        }
        -:  433:
       22:  434:        return (const char*) _dirent.name;
        -:  435:    }
        -:  436:
function _ZN13SPIFFSDirImpl8fileSizeEv called 0 returned 0% blocks executed 0%
    #####:  437:    size_t fileSize() override
        -:  438:    {
    #####:  439:        if (!_valid) {
branch  0 never executed
branch  1 never executed
    #####:  440:            return 0;
        -:  441:        }
        -:  442:
    #####:  443:        return _dirent.size;
        -:  444:    }
        -:  445:
function _ZN13SPIFFSDirImpl4nextEv called 15 returned 100% blocks executed 83%
       15:  446:    bool next() override
        -:  447:    {
       15:  448:        const int n = _pattern.length();
call    0 returned 100%
       15:  449:        do {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       15:  450:            spiffs_dirent* result = SPIFFS_readdir(&_dir, &_dirent);
call    0 returned 100%
       15:  451:            _valid = (result != nullptr);
       15:  452:        } while(_valid && strncmp((const char*) _dirent.name, _pattern.c_str(), n) != 0);
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
       15:  453:        return _valid;
        -:  454:    }
        -:  455:
        -:  456:protected:
        -:  457:    String _pattern;
        -:  458:    SPIFFSImpl* _fs;
        -:  459:    spiffs_DIR  _dir;
        -:  460:    spiffs_dirent _dirent;
        -:  461:    bool _valid;
        -:  462:};
        -:  463:
        -:  464:
        -:  465:#endif//spiffs_api_h
