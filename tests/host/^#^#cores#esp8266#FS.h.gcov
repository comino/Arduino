        -:    0:Source:../../cores/esp8266/FS.h
        -:    0:Programs:16
        -:    1:/*
        -:    2: FS.h - file system wrapper
        -:    3: Copyright (c) 2015 Ivan Grokhotkov. All rights reserved.
        -:    4: This file is part of the esp8266 core for Arduino environment.
        -:    5:
        -:    6: This library is free software; you can redistribute it and/or
        -:    7: modify it under the terms of the GNU Lesser General Public
        -:    8: License as published by the Free Software Foundation; either
        -:    9: version 2.1 of the License, or (at your option) any later version.
        -:   10:
        -:   11: This library is distributed in the hope that it will be useful,
        -:   12: but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
        -:   14: Lesser General Public License for more details.
        -:   15:
        -:   16: You should have received a copy of the GNU Lesser General Public
        -:   17: License along with this library; if not, write to the Free Software
        -:   18: Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
        -:   19: */
        -:   20:
        -:   21:#ifndef FS_H
        -:   22:#define FS_H
        -:   23:
        -:   24:#include <memory>
        -:   25:#include <Arduino.h>
        -:   26:
        -:   27:namespace fs {
        -:   28:
        -:   29:class File;
        -:   30:class Dir;
        -:   31:
        -:   32:class FileImpl;
        -:   33:typedef std::shared_ptr<FileImpl> FileImplPtr;
        -:   34:class FSImpl;
        -:   35:typedef std::shared_ptr<FSImpl> FSImplPtr;
        -:   36:class DirImpl;
        -:   37:typedef std::shared_ptr<DirImpl> DirImplPtr;
        -:   38:
        -:   39:template <typename Tfs>
        -:   40:bool mount(Tfs& fs, const char* mountPoint);
        -:   41:
        -:   42:enum SeekMode {
        -:   43:    SeekSet = 0,
        -:   44:    SeekCur = 1,
        -:   45:    SeekEnd = 2
        -:   46:};
        -:   47:
        -:   48:class File : public Stream
        -:   49:{
        -:   50:public:
function _ZN2fs4FileC2ESt10shared_ptrINS_8FileImplEE called 28 returned 100% blocks executed 100%
       28:   51:    File(FileImplPtr p = FileImplPtr()) : _p(p) {}
call    0 returned 100%
call    1 returned 100%
        -:   52:
        -:   53:    // Print methods:
        -:   54:    size_t write(uint8_t) override;
        -:   55:    size_t write(const uint8_t *buf, size_t size) override;
        -:   56:
        -:   57:    // Stream methods:
        -:   58:    int available() override;
        -:   59:    int read() override;
        -:   60:    int peek() override;
        -:   61:    void flush() override;
function _ZN2fs4File9readBytesEPcm called 0 returned 0% blocks executed 0%
    #####:   62:    size_t readBytes(char *buffer, size_t length)  override {
    #####:   63:        return read((uint8_t*)buffer, length);
call    0 never executed
        -:   64:    }
        -:   65:    size_t read(uint8_t* buf, size_t size);
        -:   66:    bool seek(uint32_t pos, SeekMode mode);
        -:   67:    bool seek(uint32_t pos) {
        -:   68:        return seek(pos, SeekSet);
        -:   69:    }
        -:   70:    size_t position() const;
        -:   71:    size_t size() const;
        -:   72:    void close();
        -:   73:    operator bool() const;
        -:   74:    const char* name() const;
        -:   75:
        -:   76:protected:
        -:   77:    FileImplPtr _p;
        -:   78:};
        -:   79:
        -:   80:class Dir {
        -:   81:public:
function _ZN2fs3DirC2ESt10shared_ptrINS_7DirImplEE called 4 returned 100% blocks executed 100%
        4:   82:    Dir(DirImplPtr impl = DirImplPtr()): _impl(impl) { }
call    0 returned 100%
        -:   83:
        -:   84:    File openFile(const char* mode);
        -:   85:    String fileName();
        -:   86:    size_t fileSize();
        -:   87:    bool next();
        -:   88:
        -:   89:protected:
        -:   90:    DirImplPtr _impl;
        -:   91:};
        -:   92:
        -:   93:struct FSInfo {
        -:   94:    size_t totalBytes;
        -:   95:    size_t usedBytes;
        -:   96:    size_t blockSize;
        -:   97:    size_t pageSize;
        -:   98:    size_t maxOpenFiles;
        -:   99:    size_t maxPathLength;
        -:  100:};
        -:  101:
        -:  102:class FS
        -:  103:{
        -:  104:public:
        -:  105:    FS(FSImplPtr impl) : _impl(impl) { }
        -:  106:
        -:  107:    bool begin();
        -:  108:    void end();
        -:  109:    
        -:  110:    bool format();
        -:  111:    bool info(FSInfo& info);
        -:  112:
        -:  113:    File open(const char* path, const char* mode);
        -:  114:    File open(const String& path, const char* mode);
        -:  115:
        -:  116:    bool exists(const char* path);
        -:  117:    bool exists(const String& path);
        -:  118:
        -:  119:    Dir openDir(const char* path);
        -:  120:    Dir openDir(const String& path);
        -:  121:
        -:  122:    bool remove(const char* path);
        -:  123:    bool remove(const String& path);
        -:  124:
        -:  125:    bool rename(const char* pathFrom, const char* pathTo);
        -:  126:    bool rename(const String& pathFrom, const String& pathTo);
        -:  127:
        -:  128:protected:
        -:  129:    FSImplPtr _impl;
        -:  130:};
        -:  131:
        -:  132:} // namespace fs
        -:  133:
        -:  134:#ifndef FS_NO_GLOBALS
        -:  135:using fs::FS;
        -:  136:using fs::File;
        -:  137:using fs::Dir;
        -:  138:using fs::SeekMode;
        -:  139:using fs::SeekSet;
        -:  140:using fs::SeekCur;
        -:  141:using fs::SeekEnd;
        -:  142:using fs::FSInfo;
        -:  143:#endif //FS_NO_GLOBALS
        -:  144:
        -:  145:#if !defined(NO_GLOBAL_INSTANCES) && !defined(NO_GLOBAL_SPIFFS)
        -:  146:extern fs::FS SPIFFS;
        -:  147:#endif
        -:  148:
        -:  149:#endif //FS_H
