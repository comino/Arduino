        -:    0:Source:../../cores/esp8266/MD5Builder.cpp
        -:    0:Programs:14
        -:    1:#include <Arduino.h>
        -:    2:#include <MD5Builder.h>
        -:    3:
function _Z16hex_char_to_byteh called 176 returned 100% blocks executed 79%
      176:    4:uint8_t hex_char_to_byte(uint8_t c){
       34:    5:    return  (c >= 'a' && c <= 'f') ? (c - ((uint8_t)'a' - 0xa)) :
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    #####:    6:            (c >= 'A' && c <= 'F') ? (c - ((uint8_t)'A' - 0xA)) :
branch  0 never executed
branch  1 never executed
      210:    7:            (c >= '0' &&  c<= '9') ? (c - (uint8_t)'0') : 0;
branch  0 taken 19% (fallthrough)
branch  1 taken 81%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        -:    8:}
        -:    9:
function _ZN10MD5Builder5beginEv called 7 returned 100% blocks executed 100%
        7:   10:void MD5Builder::begin(void){
        7:   11:    memset(_buf, 0x00, 16);
        7:   12:    MD5Init(&_ctx);
call    0 returned 100%
        7:   13:}
        -:   14:
function _ZN10MD5Builder3addEPKht called 4 returned 100% blocks executed 100%
        4:   15:void MD5Builder::add(const uint8_t * data, const uint16_t len){
        4:   16:    MD5Update(&_ctx, data, len);
call    0 returned 100%
        4:   17:}
        -:   18:
function _ZN10MD5Builder12addHexStringEPKc called 2 returned 100% blocks executed 90%
        2:   19:void MD5Builder::addHexString(const char * data){
        2:   20:    uint16_t i, len = strlen(data);
        2:   21:    uint8_t * tmp = (uint8_t*)malloc(len/2);
        2:   22:    if(tmp == NULL) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   23:        return;
        -:   24:    }
       90:   25:    for(i=0; i<len; i+=2) {
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
       88:   26:        uint8_t high = hex_char_to_byte(data[i]);
call    0 returned 100%
       88:   27:        uint8_t low = hex_char_to_byte(data[i+1]);
call    0 returned 100%
       88:   28:        tmp[i/2] = (high & 0x0F) << 4 | (low & 0x0F);
        -:   29:    }
        2:   30:    add(tmp, len/2);
call    0 returned 100%
        2:   31:    free(tmp);
        -:   32:}
        -:   33:
function _ZN10MD5Builder9addStreamER6Streamm called 3 returned 100% blocks executed 84%
        3:   34:bool MD5Builder::addStream(Stream & stream, const size_t maxLen){
        3:   35:    const int buf_size = 512;
        3:   36:    int maxLengthLeft = maxLen;
        3:   37:    uint8_t * buf = (uint8_t*) malloc(buf_size);
        -:   38:
        3:   39:    if(!buf) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   40:        return false;
        -:   41:    }
        -:   42:
        3:   43:    int bytesAvailable = stream.available();
call    0 returned 100%
        9:   44:    while((bytesAvailable > 0) && (maxLengthLeft > 0)) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 75% (fallthrough)
branch  3 taken 25%
        -:   45:
        -:   46:        // determine number of bytes to read
        3:   47:        int readBytes = bytesAvailable;
        3:   48:        if(readBytes > maxLengthLeft) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   49:            readBytes = maxLengthLeft ;    // read only until max_len
        -:   50:        }
        3:   51:        if(readBytes > buf_size) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   52:            readBytes = buf_size;    // not read more the buffer can handle
        -:   53:        }
        -:   54:
        -:   55:        // read data and check if we got something
        3:   56:        int numBytesRead = stream.readBytes(buf, readBytes);
call    0 returned 100%
        3:   57:        if(numBytesRead< 1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   58:            return false;
        -:   59:        }
        -:   60:
        -:   61:        // Update MD5 with buffer payload
        3:   62:        MD5Update(&_ctx, buf, numBytesRead);
call    0 returned 100%
        -:   63:
        3:   64:        yield();      // time for network streams
call    0 returned 100%
        -:   65:
        -:   66:        // update available number of bytes
        3:   67:        maxLengthLeft -= numBytesRead;
        3:   68:        bytesAvailable = stream.available();
call    0 returned 100%
        -:   69:    }
        3:   70:    free(buf);
        3:   71:    return true;
        -:   72:}
        -:   73:
function _ZN10MD5Builder9calculateEv called 7 returned 100% blocks executed 100%
        7:   74:void MD5Builder::calculate(void){
        7:   75:    MD5Final(_buf, &_ctx);
call    0 returned 100%
        7:   76:}
        -:   77:
function _ZN10MD5Builder8getBytesEPh called 0 returned 0% blocks executed 0%
    #####:   78:void MD5Builder::getBytes(uint8_t * output){
    #####:   79:    memcpy(output, _buf, 16);
    #####:   80:}
        -:   81:
function _ZN10MD5Builder8getCharsEPc called 7 returned 100% blocks executed 100%
        7:   82:void MD5Builder::getChars(char * output){
      119:   83:    for(uint8_t i = 0; i < 16; i++) {
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      112:   84:        sprintf(output + (i * 2), "%02x", _buf[i]);
        -:   85:    }
        7:   86:}
        -:   87:
function _ZN10MD5Builder8toStringEv called 7 returned 100% blocks executed 100%
        7:   88:String MD5Builder::toString(void){
        -:   89:    char out[33];
        7:   90:    getChars(out);
call    0 returned 100%
        7:   91:    return String(out);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   92:}
