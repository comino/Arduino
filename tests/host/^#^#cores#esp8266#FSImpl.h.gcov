        -:    0:Source:../../cores/esp8266/FSImpl.h
        -:    0:Programs:16
        -:    1:/*
        -:    2: FSImpl.h - base file system interface
        -:    3: Copyright (c) 2015 Ivan Grokhotkov. All rights reserved.
        -:    4: This file is part of the esp8266 core for Arduino environment.
        -:    5:
        -:    6: This library is free software; you can redistribute it and/or
        -:    7: modify it under the terms of the GNU Lesser General Public
        -:    8: License as published by the Free Software Foundation; either
        -:    9: version 2.1 of the License, or (at your option) any later version.
        -:   10:
        -:   11: This library is distributed in the hope that it will be useful,
        -:   12: but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
        -:   14: Lesser General Public License for more details.
        -:   15:
        -:   16: You should have received a copy of the GNU Lesser General Public
        -:   17: License along with this library; if not, write to the Free Software
        -:   18: Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
        -:   19: */
        -:   20:#ifndef FSIMPL_H
        -:   21:#define FSIMPL_H
        -:   22:
        -:   23:#include <stddef.h>
        -:   24:#include <stdint.h>
        -:   25:
        -:   26:namespace fs {
        -:   27:
function _ZN2fs8FileImplC2Ev called 23 returned 100% blocks executed 100%
       23:   28:class FileImpl {
        -:   29:public:
function _ZN2fs8FileImplD0Ev called 0 returned 0% blocks executed 0%
function _ZN2fs8FileImplD2Ev called 23 returned 100% blocks executed 67%
       23:   30:    virtual ~FileImpl() { }
call    0 never executed
call    1 never executed
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
        -:   31:    virtual size_t write(const uint8_t *buf, size_t size) = 0;
        -:   32:    virtual size_t read(uint8_t* buf, size_t size) = 0;
        -:   33:    virtual void flush() = 0;
        -:   34:    virtual bool seek(uint32_t pos, SeekMode mode) = 0;
        -:   35:    virtual size_t position() const = 0;
        -:   36:    virtual size_t size() const = 0;
        -:   37:    virtual void close() = 0;
        -:   38:    virtual const char* name() const = 0;
        -:   39:};
        -:   40:
        -:   41:enum OpenMode {
        -:   42:    OM_DEFAULT = 0,
        -:   43:    OM_CREATE = 1,
        -:   44:    OM_APPEND = 2,
        -:   45:    OM_TRUNCATE = 4
        -:   46:};
        -:   47:
        -:   48:enum AccessMode {
        -:   49:    AM_READ = 1,
        -:   50:    AM_WRITE = 2,
        -:   51:    AM_RW = AM_READ | AM_WRITE
        -:   52:};
        -:   53:
function _ZN2fs7DirImplC2Ev called 4 returned 100% blocks executed 100%
        4:   54:class DirImpl {
        -:   55:public:
function _ZN2fs7DirImplD0Ev called 0 returned 0% blocks executed 0%
function _ZN2fs7DirImplD2Ev called 4 returned 100% blocks executed 67%
        4:   56:    virtual ~DirImpl() { }
call    0 never executed
call    1 never executed
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
        -:   57:    virtual FileImplPtr openFile(OpenMode openMode, AccessMode accessMode) = 0;
        -:   58:    virtual const char* fileName() = 0;
        -:   59:    virtual size_t fileSize() = 0;
        -:   60:    virtual bool next() = 0;
        -:   61:};
        -:   62:
        -:   63:class FSImpl {
        -:   64:public:
        -:   65:    virtual bool begin() = 0;
        -:   66:    virtual void end() = 0;
        -:   67:    virtual bool format() = 0;
        -:   68:    virtual bool info(FSInfo& info) = 0;
        -:   69:    virtual FileImplPtr open(const char* path, OpenMode openMode, AccessMode accessMode) = 0;
        -:   70:    virtual bool exists(const char* path) = 0;
        -:   71:    virtual DirImplPtr openDir(const char* path) = 0;
        -:   72:    virtual bool rename(const char* pathFrom, const char* pathTo) = 0;
        -:   73:    virtual bool remove(const char* path) = 0;
        -:   74:
        -:   75:};
        -:   76:
        -:   77:} // namespace fs
        -:   78:
        -:   79:#endif //FSIMPL_H
