        -:    0:Source:../../cores/esp8266/Stream.cpp
        -:    0:Programs:14
        -:    1:/*
        -:    2: Stream.cpp - adds parsing methods to Stream class
        -:    3: Copyright (c) 2008 David A. Mellis.  All right reserved.
        -:    4:
        -:    5: This library is free software; you can redistribute it and/or
        -:    6: modify it under the terms of the GNU Lesser General Public
        -:    7: License as published by the Free Software Foundation; either
        -:    8: version 2.1 of the License, or (at your option) any later version.
        -:    9:
        -:   10: This library is distributed in the hope that it will be useful,
        -:   11: but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
        -:   13: Lesser General Public License for more details.
        -:   14:
        -:   15: You should have received a copy of the GNU Lesser General Public
        -:   16: License along with this library; if not, write to the Free Software
        -:   17: Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
        -:   18:
        -:   19: Created July 2011
        -:   20: parsing functions based on TextFinder library by Michael Margolis
        -:   21: */
        -:   22:
        -:   23:#include <Arduino.h>
        -:   24:#include <Stream.h>
        -:   25:#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
        -:   26:#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field
        -:   27:
        -:   28:// private method to read stream with timeout
function _ZN6Stream9timedReadEv called 237 returned 100% blocks executed 100%
      237:   29:int Stream::timedRead() {
        -:   30:    int c;
      237:   31:    _startMillis = millis();
call    0 returned 100%
 23390680:   32:    do {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
 23390915:   33:        c = read();
call    0 returned 100%
 23390915:   34:        if(c >= 0)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      235:   35:            return c;
 23390680:   36:        yield();
call    0 returned 100%
 23390680:   37:    } while(millis() - _startMillis < _timeout);
call    0 returned 100%
        2:   38:    return -1;     // -1 indicates timeout
        -:   39:}
        -:   40:
        -:   41:// private method to peek stream with timeout
function _ZN6Stream9timedPeekEv called 0 returned 0% blocks executed 0%
    #####:   42:int Stream::timedPeek() {
        -:   43:    int c;
    #####:   44:    _startMillis = millis();
call    0 never executed
    #####:   45:    do {
branch  0 never executed
branch  1 never executed
    #####:   46:        c = peek();
call    0 never executed
    #####:   47:        if(c >= 0)
branch  0 never executed
branch  1 never executed
    #####:   48:            return c;
    #####:   49:        yield();
call    0 never executed
    #####:   50:    } while(millis() - _startMillis < _timeout);
call    0 never executed
    #####:   51:    return -1;     // -1 indicates timeout
        -:   52:}
        -:   53:
        -:   54:// returns peek of the next digit in the stream or -1 if timeout
        -:   55:// discards non-numeric characters
function _ZN6Stream13peekNextDigitEv called 0 returned 0% blocks executed 0%
    #####:   56:int Stream::peekNextDigit() {
        -:   57:    int c;
    #####:   58:    while(1) {
    #####:   59:        c = timedPeek();
call    0 never executed
    #####:   60:        if(c < 0)
branch  0 never executed
branch  1 never executed
    #####:   61:            return c;  // timeout
    #####:   62:        if(c == '-')
branch  0 never executed
branch  1 never executed
    #####:   63:            return c;
    #####:   64:        if(c >= '0' && c <= '9')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   65:            return c;
    #####:   66:        read();  // discard non-numeric
call    0 never executed
        -:   67:    }
        -:   68:}
        -:   69:
        -:   70:// Public Methods
        -:   71://////////////////////////////////////////////////////////////
        -:   72:
function _ZN6Stream10setTimeoutEm called 0 returned 0% blocks executed 0%
    #####:   73:void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
        -:   74:{
    #####:   75:    _timeout = timeout;
    #####:   76:}
        -:   77:
        -:   78:// find returns true if the target string is found
function _ZN6Stream4findEPKc called 0 returned 0% blocks executed 0%
    #####:   79:bool Stream::find(const char *target) {
    #####:   80:    return findUntil(target, (char*) "");
call    0 never executed
        -:   81:}
        -:   82:
        -:   83:// reads data from the stream until the target string of given length is found
        -:   84:// returns true if target string is found, false if timed out
function _ZN6Stream4findEPKcm called 0 returned 0% blocks executed 0%
    #####:   85:bool Stream::find(const char *target, size_t length) {
    #####:   86:    return findUntil(target, length, NULL, 0);
call    0 never executed
        -:   87:}
        -:   88:
        -:   89:// as find but search ends if the terminator string is found
function _ZN6Stream9findUntilEPKcS1_ called 0 returned 0% blocks executed 0%
    #####:   90:bool Stream::findUntil(const char *target, const char *terminator) {
    #####:   91:    return findUntil(target, strlen(target), terminator, strlen(terminator));
call    0 never executed
        -:   92:}
        -:   93:
        -:   94:// reads data from the stream until the target string of the given length is found
        -:   95:// search terminated if the terminator string is found
        -:   96:// returns true if target string is found, false if terminated or timed out
function _ZN6Stream9findUntilEPKcmS1_m called 0 returned 0% blocks executed 0%
    #####:   97:bool Stream::findUntil(const char *target, size_t targetLen, const char *terminator, size_t termLen) {
    #####:   98:    size_t index = 0;  // maximum target string length is 64k bytes!
    #####:   99:    size_t termIndex = 0;
        -:  100:    int c;
        -:  101:
    #####:  102:    if(*target == 0)
branch  0 never executed
branch  1 never executed
    #####:  103:        return true;   // return true if target is a null string
    #####:  104:    while((c = timedRead()) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  105:
    #####:  106:        if(c != target[index])
branch  0 never executed
branch  1 never executed
    #####:  107:            index = 0; // reset index if any char does not match
        -:  108:
    #####:  109:        if(c == target[index]) {
branch  0 never executed
branch  1 never executed
        -:  110:            //////Serial.print("found "); Serial.write(c); Serial.print("index now"); Serial.println(index+1);
    #####:  111:            if(++index >= targetLen) { // return true if all chars in the target match
branch  0 never executed
branch  1 never executed
    #####:  112:                return true;
        -:  113:            }
        -:  114:        }
        -:  115:
    #####:  116:        if(termLen > 0 && c == terminator[termIndex]) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  117:            if(++termIndex >= termLen)
branch  0 never executed
branch  1 never executed
    #####:  118:                return false;       // return false if terminate string found before target string
        -:  119:        } else
    #####:  120:            termIndex = 0;
        -:  121:    }
    #####:  122:    return false;
        -:  123:}
        -:  124:
        -:  125:// returns the first valid (long) integer value from the current position.
        -:  126:// initial characters that are not digits (or the minus sign) are skipped
        -:  127:// function is terminated by the first character that is not a digit.
function _ZN6Stream8parseIntEv called 0 returned 0% blocks executed 0%
    #####:  128:long Stream::parseInt() {
    #####:  129:    return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
call    0 never executed
        -:  130:}
        -:  131:
        -:  132:// as above but a given skipChar is ignored
        -:  133:// this allows format characters (typically commas) in values to be ignored
function _ZN6Stream8parseIntEc called 0 returned 0% blocks executed 0%
    #####:  134:long Stream::parseInt(char skipChar) {
    #####:  135:    boolean isNegative = false;
    #####:  136:    long value = 0;
        -:  137:    int c;
        -:  138:
    #####:  139:    c = peekNextDigit();
call    0 never executed
        -:  140:    // ignore non numeric leading characters
    #####:  141:    if(c < 0)
branch  0 never executed
branch  1 never executed
    #####:  142:        return 0; // zero returned if timeout
        -:  143:
    #####:  144:    do {
    #####:  145:        if(c == skipChar)
branch  0 never executed
branch  1 never executed
        -:  146:            ; // ignore this charactor
    #####:  147:        else if(c == '-')
branch  0 never executed
branch  1 never executed
    #####:  148:            isNegative = true;
    #####:  149:        else if(c >= '0' && c <= '9')        // is c a digit?
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  150:            value = value * 10 + c - '0';
    #####:  151:        read();  // consume the character we got with peek
call    0 never executed
    #####:  152:        c = timedPeek();
call    0 never executed
    #####:  153:    } while((c >= '0' && c <= '9') || c == skipChar);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  154:
    #####:  155:    if(isNegative)
branch  0 never executed
branch  1 never executed
    #####:  156:        value = -value;
    #####:  157:    return value;
        -:  158:}
        -:  159:
        -:  160:// as parseInt but returns a floating point value
function _ZN6Stream10parseFloatEv called 0 returned 0% blocks executed 0%
    #####:  161:float Stream::parseFloat() {
    #####:  162:    return parseFloat(NO_SKIP_CHAR);
call    0 never executed
        -:  163:}
        -:  164:
        -:  165:// as above but the given skipChar is ignored
        -:  166:// this allows format characters (typically commas) in values to be ignored
function _ZN6Stream10parseFloatEc called 0 returned 0% blocks executed 0%
    #####:  167:float Stream::parseFloat(char skipChar) {
    #####:  168:    boolean isNegative = false;
    #####:  169:    boolean isFraction = false;
    #####:  170:    long value = 0;
        -:  171:    int c;
    #####:  172:    float fraction = 1.0;
        -:  173:
    #####:  174:    c = peekNextDigit();
call    0 never executed
        -:  175:    // ignore non numeric leading characters
    #####:  176:    if(c < 0)
branch  0 never executed
branch  1 never executed
    #####:  177:        return 0; // zero returned if timeout
        -:  178:
    #####:  179:    do {
    #####:  180:        if(c == skipChar)
branch  0 never executed
branch  1 never executed
        -:  181:            ; // ignore
    #####:  182:        else if(c == '-')
branch  0 never executed
branch  1 never executed
    #####:  183:            isNegative = true;
    #####:  184:        else if(c == '.')
branch  0 never executed
branch  1 never executed
    #####:  185:            isFraction = true;
    #####:  186:        else if(c >= '0' && c <= '9') {      // is c a digit?
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  187:            value = value * 10 + c - '0';
    #####:  188:            if(isFraction)
branch  0 never executed
branch  1 never executed
    #####:  189:                fraction *= 0.1;
        -:  190:        }
    #####:  191:        read();  // consume the character we got with peek
call    0 never executed
    #####:  192:        c = timedPeek();
call    0 never executed
    #####:  193:    } while((c >= '0' && c <= '9') || c == '.' || c == skipChar);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:  194:
    #####:  195:    if(isNegative)
branch  0 never executed
branch  1 never executed
    #####:  196:        value = -value;
    #####:  197:    if(isFraction)
branch  0 never executed
branch  1 never executed
    #####:  198:        return value * fraction;
        -:  199:    else
    #####:  200:        return value;
        -:  201:}
        -:  202:
        -:  203:// read characters from stream into buffer
        -:  204:// terminates if length characters have been read, or timeout (see setTimeout)
        -:  205:// returns the number of characters placed in the buffer
        -:  206:// the buffer is NOT null terminated.
        -:  207://
function _ZN6Stream9readBytesEPcm called 3 returned 100% blocks executed 88%
        3:  208:size_t Stream::readBytes(char *buffer, size_t length) {
        3:  209:    size_t count = 0;
      443:  210:    while(count < length) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
      220:  211:        int c = timedRead();
call    0 returned 100%
      220:  212:        if(c < 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  213:            break;
      220:  214:        *buffer++ = (char) c;
      220:  215:        count++;
        -:  216:    }
        3:  217:    return count;
        -:  218:}
        -:  219:
        -:  220:// as readBytes with terminator character
        -:  221:// terminates if length characters have been read, timeout, or if the terminator character  detected
        -:  222:// returns the number of characters placed in the buffer (0 means no valid data found)
        -:  223:
function _ZN6Stream14readBytesUntilEcPcm called 0 returned 0% blocks executed 0%
    #####:  224:size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length) {
    #####:  225:    if(length < 1)
branch  0 never executed
branch  1 never executed
    #####:  226:        return 0;
    #####:  227:    size_t index = 0;
    #####:  228:    while(index < length) {
branch  0 never executed
branch  1 never executed
    #####:  229:        int c = timedRead();
call    0 never executed
    #####:  230:        if(c < 0 || c == terminator)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  231:            break;
    #####:  232:        *buffer++ = (char) c;
    #####:  233:        index++;
        -:  234:    }
    #####:  235:    return index; // return number of characters, not including null terminator
        -:  236:}
        -:  237:
function _ZN6Stream10readStringEv called 2 returned 100% blocks executed 91%
        2:  238:String Stream::readString() {
        2:  239:    String ret;
call    0 returned 100%
        2:  240:    int c = timedRead();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       32:  241:    while(c >= 0) {
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
       15:  242:        ret += (char) c;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       15:  243:        c = timedRead();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  244:    }
        2:  245:    return ret;
call    0 never executed
        -:  246:}
        -:  247:
function _ZN6Stream15readStringUntilEc called 0 returned 0% blocks executed 0%
    #####:  248:String Stream::readStringUntil(char terminator) {
    #####:  249:    String ret;
call    0 never executed
    #####:  250:    int c = timedRead();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  251:    while(c >= 0 && c != terminator) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  252:        ret += (char) c;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  253:        c = timedRead();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  254:    }
    #####:  255:    return ret;
call    0 never executed
        -:  256:}
        -:  257:
